import numpy as np

#array is as sequence of numbers all of a same type

arr=np.array([2,3,4])
print(arr)

print(type(arr))
arr=np.zeros(5)
print(arr)
arr=np.arange(10,30,5)
print(arr)

arr = np.array( [ [ 1, 2 ], [ 4, 5 ], [ 7, 8 ] ] )
print( arr )
print( arr[ 1 ] ) #prints index 1 (second element)
print( arr[ 1, 1 ] ) #of index 1, print index 1 (second element of the second element)
print( arr[ -1 ] ) #print the last index
print( arr[ 1: 3 ] ) #print the 1st index and second index, remember the 3 is NOT inclusive

np.histogram(arr,2) #creates histogram
np.var(arr) #variance
np.std(arr) #standard deviation in array
np.amax(arr) #maximum value in array

#pandas, this uses a Series which is a ID labelled array. Each label is attached to a data value
import pandas as pd

s = pd.Series( [ 1, 2, 3 ], [ 'a', 'b', 'c' ] )
print(s)
d = { 'a': 3.14, 'b': 6.29, 'x': -1.34 } #we can use these labels to do a SQL type join
t=pd.Series(d)
print(t)
a = np.array( [ 4.5, 5.5, 6.5 ] )
u = pd.Series( a )
print( u )

s = pd.Series( [ 1, 2, 3 ], [ 'a', 'b', 'c' ] )
print(s)
print(s[1])
print( s[ 'c' ] )
print( s[ 1: 3 ] )

s = pd.Series( [ 1, 2, 3, 4, 5 ] ) #series 1-5 inclusive
idx = ( s > 2 ) & ( s < 5 ) #this is a conditional, values between 2 and 5, integers 3 and 4
print( idx )
s_sub=s[idx]
print(s_sub) #prints the subseries which is the true values of the first conditional

#Passing this boolean Series as an index to s returns the data elements in s whose corresponding index is True

#data alignment

s = pd.Series( [ 1, 2, 3 ], [ 'a', 'b', 'c' ] )
t = pd.Series( { 'a': 3.14, 'b': 6.29, 'x': -1.34 } )
print(s+t)

#we get NaN because X is not a common value in both series but we do get values for a and b
